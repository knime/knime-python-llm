Add TODOS everywhere (!) you think we need later improvement but cannot fix immediatley
Add checks to all the configure methods if configurations and everthing is good, rais ValueErrors
Add types
Add Node descriptions or TODOs to do later on
Add node ideas ontop of the according files

Confirm changes for another on top of file


Remove Logging where its possible. If temporarely needed:

import logging
LOGGER = logging.getLogger(__name__)

1. Have a standardized Template for every thing
1.1.1 SuperPortObject (Spec) Interfaces:

class SuperPortObjectSpec(knext.PortObjectSpec):
    def serialize(self) -> dict:
        return {}

    @classmethod
    def deserialize(cls, data: dict):
        return cls()

class SuperPortObject(knext.PortObject):

    def __init__(self, spec: LLMPortObjectSpec) -> None:
        super().__init__(spec)

    def serialize(self) -> bytes:
        return b""
    
    @classmethod
    def deserialize(cls, spec: SuperPortObject, storage: bytes):
        return cls(spec)

    def optional_method(self, ctx):
        raise NotImplementedError()

super_port_type = knext.port_type("Super Port Type", SuperPortObject, SuperPortObjectSpec)
# Consumer input_port is super_port_type

1.1.2 SubPortObject Implementation:

class SubPortObjectSpec(SuperPortObjectSpec):
    def __init__(self, optional_var) -> None:
        super().__init__()
        self._optional_var = optional_var

    @property
    def optional_var(self):
        return self._optional_var

    def serialize(self) -> dict:
        return {
            "optional_var": self._optional_var
            }

    @classmethod
    def deserialize(cls, data: dict):
        return cls(data["optional_var"])

class SubPortObject(SubPortObject):
    def __init__(self, spec: SubPortObjectSpec):
        super().__init__(spec)

    def serialize(self) -> bytes:
        return b""
    
    @classmethod
    def deserialize(cls, spec, data):
        return cls(spec)

    def optional_method(self, ctx):
        return something

X_super_port_type = knext.port_type("Sub Port Type", SubPortObject, SubPortObjectSpec)
# Provider output_port is sub_port_type 

Example:

llm_port_type = knext.port_type("LLM Port", LLMPortObject, LLMPortObjectSpec)
openai_llm_port_type = knext.port_type("OpenAI LLM Port", OpenAILLMPortObject, OpenAILLMPortObjectSpec)


1.2.1

@knext.node("Template Node", knext.NodeType.PREDICTOR, "", model_category)
@knext.input_port("Super Type Port", "", super_port_type)
@knext.input_table("Table", "")
@knext.output_port("Sub Port Type", "", sub_port_type)
class Template:
    def configure(
        self,
        ctx: knext.ConfigurationContext,
        super_type_spec: SuperPortObjectSpec,
        input_table_spec: knext.Schema,
    ) -> SubPortObjectSpec:

    def execute(
        self,
        ctx: knext.ExecutionContext,
        super_type: SuperPortObject,
        input_table: knext.Table,
    ) -> SuperPortObjectSpec:

1.2.2
    def create_spec():
        return SubPortObjectSpec()

Rethink naming
Rethink colour of nodes 
Rethink Port names 

Check spelling


Make extensive node descriptions for every node

Rework the configuration dialogs for each node to have the necessary Options

Workflow to Tool 
Other Tools 