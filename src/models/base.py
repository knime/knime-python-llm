# KNIME / own imports
import knime.extension as knext
import pyarrow as pa
from knime.extension import Schema
import util
import asyncio
from base import AIPortObjectSpec
from typing import List, Callable, Optional, Type
from functools import partial


model_category = knext.category(
    path=util.main_category,
    level_id="models",
    name="Models",
    description="",
    icon="icons/ml.png",
)


@knext.parameter_group(label="Model Parameters")
class GeneralSettings:
    temperature = knext.DoubleParameter(
        label="Temperature",
        description="""
        Sampling temperature to use, between 0.0 and 100.0. 
        Higher values will make the output more random, 
        while lower values will make it more focused and deterministic.
        """,
        default_value=0.2,
        min_value=0.0,
        max_value=100.0,
        is_advanced=True,
    )

    top_p = knext.DoubleParameter(
        label="Top-p sampling",
        description="""
        An alternative to sampling with temperature, 
        where the model considers the results of the tokens (words) 
        with top_p probability mass. Hence, 0.1 means only the tokens 
        comprising the top 10% probability mass are considered.
        """,
        default_value=0.15,
        min_value=0.01,
        max_value=1.0,
        is_advanced=True,
    )


class GeneralRemoteSettings(GeneralSettings):
    n_requests = knext.IntParameter(
        label="Number of concurrent requests",
        description="""Maximum number of concurrent requests to LLMs that can be made, 
        whether through API calls or to an inference server.
        Exceeding this limit may result in temporary restrictions on your access.

        It is important to plan your usage according to the model provider's rate limits,
        and keep in mind that both software and hardware constraints can impact performance.

        For OpenAI, please refer to the [Limits page](https://platform.openai.com/account/limits) 
        for the rate limits available to you.
        """,
        default_value=1,
        min_value=1,
        is_advanced=True,
        since_version="5.3.0",
    )


def _supports_json_mode(
    ctx: knext.DialogCreationContext,
) -> bool:
    input_spec = ctx.get_input_specs()[0]

    # this check is necessary to be able to open the configuration dialog
    # of the nodes when they are not connected to any other node
    if input_spec is None:
        return False

    return OutputFormatOptions.JSON in input_spec.supported_output_formats


class OutputFormatOptions(knext.EnumParameterOptions):
    Text = (
        "Text",
        "Text output message generated by the model.",
    )

    JSON = (
        "JSON",
        """
        When JSON is selected, the model is constrained to only generate strings 
        that parse into valid JSON object. Make sure you include the string "JSON"
        in your prompt or system message to instruct the model to output valid JSON 
        when this mode is selected.  
        For example: "Tell me a joke. Please only reply in valid JSON."
        Please refer to the OpenAI [guide](https://platform.openai.com/docs/guides/structured-outputs/structured-outputs-vs-json-mode) 
        to see which models currently support JSON outputs.
        """,
    )


def _get_output_format_value_switch() -> knext.EnumParameter:
    return knext.EnumParameter(
        "Output format",
        "Choose between different output formats.",
        OutputFormatOptions.Text.name,
        OutputFormatOptions,
        style=knext.EnumParameter.Style.VALUE_SWITCH,
        since_version="5.4.1",
    ).rule(
        knext.DialogContextCondition(_supports_json_mode),
        knext.Effect.ENABLE,
    )


def _tool_definition_table_present(ctx: knext.DialogCreationContext) -> bool:
    specs = ctx.get_input_specs()
    return len(specs) > 2 and specs[2] is not None


@knext.parameter_group(label="Conversation Settings")
class ChatConversationSettings:
    def __init__(self, port_index=1) -> None:
        self.role_column = knext.ColumnParameter(
            "Message roles column",
            "Select the column that specifies the alternating sender roles assigned to each message. Example values are 'Human' and 'AI'.",
            port_index=port_index,
            column_filter=util.create_type_filer(knext.string()),
        )

        self.content_column = knext.ColumnParameter(
            "Messages column",
            "Select the column containing the messages composing the conversation history.",
            port_index=port_index,
            column_filter=util.create_type_filer(knext.string()),
        )

    def configure(
        self, input_table_spec: knext.Schema, has_tools: Optional[bool] = False
    ):
        available_columns = [c for c in input_table_spec]
        available_columns.reverse()
        if self.role_column:
            util.check_column(
                input_table_spec,
                self.role_column,
                knext.string(),
                "role",
            )
        else:
            self.role_column = util.pick_default_column(
                available_columns, knext.string()
            )
        available_columns = [c for c in available_columns if c.name != self.role_column]
        if self.content_column:
            util.check_column(
                input_table_spec,
                self.content_column,
                knext.string(),
                "content",
            )
        else:
            try:
                self.content_column = util.pick_default_column(
                    available_columns, knext.string()
                )
            except knext.InvalidParametersError:
                raise knext.InvalidParametersError(
                    "The conversation table must contain at least two string columns. "
                    "One for the message roles and one for the message contents."
                )

        if self.role_column == self.content_column:
            raise knext.InvalidParametersError(
                "The role and content column cannot be the same."
            )

    def create_messages(self, data_frame):  # -> list[ToolMessage | Any | ChatMessage]:
        if data_frame.empty:
            return []

        return data_frame.apply(self._create_message, axis=1).tolist()

    def _create_message(self, row: dict):
        import langchain_core.messages as lcm

        role = row.get(self.role_column)
        if role is None:
            raise ValueError("No role provided.")
        message_type = self._role_to_message_type.get(role.lower(), None)
        content = row.get(self.content_column)
        if message_type == lcm.AIMessage:
            return lcm.AIMessage(content=content)
        if message_type:
            return message_type(content=content)
        else:
            # fallback to be used if the user provides other roles
            # which may or may not work in subsequent calls
            return lcm.ChatMessage(content=content, role=role)

    @property
    def _role_to_message_type(self):
        import langchain_core.messages as lcm

        return {
            "ai": lcm.AIMessage,
            "assistant": lcm.AIMessage,
            "user": lcm.HumanMessage,
            "human": lcm.HumanMessage,
            "tool": lcm.ToolMessage,
        }


class ToolChatConversationSettings(ChatConversationSettings):
    def __init__(self, port_index=1):
        super().__init__(port_index=1)
        self.tool_name_column = knext.ColumnParameter(
            "Tool name column",
            "Select the column containing the tool names.",
            port_index=port_index,
            column_filter=util.create_type_filer(knext.string()),
            include_none_column=True,
            default_value=knext.ColumnParameter.NONE,
            since_version="5.5.0",
        ).rule(
            knext.DialogContextCondition(_tool_definition_table_present),
            knext.Effect.ENABLE,
        )

        self.tool_call_id_column = knext.ColumnParameter(
            "Tool call ID column",
            "Select the column containing the tool call IDs.",
            port_index=port_index,
            column_filter=util.create_type_filer(knext.string()),
            include_none_column=True,
            default_value=knext.ColumnParameter.NONE,
            since_version="5.5.0",
        ).rule(
            knext.DialogContextCondition(_tool_definition_table_present),
            knext.Effect.ENABLE,
        )

        self.tool_call_arguments_column = knext.ColumnParameter(
            "Tool call arguments column",
            "Select the column containing the tool call arguments.",
            port_index=port_index,
            column_filter=util.create_type_filer(knext.logical(dict)),
            include_none_column=True,
            default_value=knext.ColumnParameter.NONE,
            since_version="5.5.0",
        ).rule(
            knext.DialogContextCondition(_tool_definition_table_present),
            knext.Effect.ENABLE,
        )

    def configure(self, input_table_spec: knext.Schema, has_tools: bool):
        super().configure(input_table_spec, has_tools)

        if has_tools:
            # auto configure is not implemented because there is a bug
            # on the java side that results in dialogs not showing changes made
            # by configure calls after the dialog was opened the first time
            # since the input here is optional, it's very likely that the user
            # will have opened the dialog before connecting the tool table
            self._check_tool_column(
                input_table_spec, self.tool_name_column, knext.string(), "tool name"
            )
            self._check_tool_column(
                input_table_spec,
                self.tool_call_id_column,
                knext.string(),
                "tool call ID",
            )
            self._check_tool_column(
                input_table_spec,
                self.tool_call_arguments_column,
                knext.logical(dict),
                "tool call arguments",
            )

    def _check_tool_column(
        self, conversation_table_spec, column, ctype, column_purpose
    ):
        if column == knext.ColumnParameter.NONE:
            raise knext.InvalidParametersError(
                f"Please select a column containing the {column_purpose}."
            )
        util.check_column(
            conversation_table_spec, column, ctype, column_purpose, "tool definitions"
        )

    def _create_message(self, row: dict):
        import langchain_core.messages as lcm
        import pandas as pd

        role = row.get(self.role_column).lower()
        content = row.get(self.content_column)
        if role == "tool":
            return lcm.ToolMessage(
                content=content,
                tool_call_id=row.get(self.tool_call_id_column),
            )
        if role == "ai":
            tool_calls = []
            if self.tool_call_arguments_column in row and pd.notna(
                row[self.tool_call_id_column]
            ):
                tool_calls.append(
                    lcm.ToolCall(
                        name=row[self.tool_name_column],
                        id=row[self.tool_call_id_column],
                        args=row[self.tool_call_arguments_column],
                    )
                )
            return lcm.AIMessage(content=content, tool_calls=tool_calls)
        return super()._create_message(row)


@knext.parameter_group(label="Credentials")
class CredentialsSettings:
    def __init__(self, label, description):
        def _get_default_credentials(identifier):
            return knext.DialogCreationContext.get_credential_names(identifier)

        self.credentials_param = knext.StringParameter(
            label=label,
            description=description,
            choices=lambda a: _get_default_credentials(a),
        )


class LLMPortObjectSpec(AIPortObjectSpec):
    """Most generic spec of LLMs. Used to define the most generic LLM PortType"""

    def __init__(
        self,
        n_requests: int = 1,
    ) -> None:
        super().__init__()
        self._n_requests = n_requests

    @property
    def n_requests(self) -> int:
        return self._n_requests

    @property
    def supported_output_formats(self) -> list[OutputFormatOptions]:
        return [OutputFormatOptions.Text]


class LLMPortObject(knext.PortObject):
    def __init__(self, spec: LLMPortObjectSpec) -> None:
        super().__init__(spec)

    def serialize(self) -> bytes:
        return b""

    @classmethod
    def deserialize(cls, spec: LLMPortObjectSpec, storage: bytes):
        return cls(spec)

    def create_model(self, ctx: knext.ExecutionContext):
        raise NotImplementedError()


llm_port_type = knext.port_type("LLM", LLMPortObject, LLMPortObjectSpec)


class ChatModelPortObjectSpec(LLMPortObjectSpec):
    """Most generic chat model spec. Used to define the most generic chat model PortType."""


class ChatModelPortObject(LLMPortObject):
    def __init__(self, spec: ChatModelPortObjectSpec) -> None:
        super().__init__(spec)

    def serialize(self):
        return b""

    @classmethod
    def deserialize(cls, spec, data: dict):
        return cls(spec)

    def create_model(self, ctx: knext.ExecutionContext):
        raise NotImplementedError()


chat_model_port_type = knext.port_type(
    "Chat Model", ChatModelPortObject, ChatModelPortObjectSpec
)


class EmbeddingsPortObjectSpec(AIPortObjectSpec):
    """Most generic embeddings model spec. Used to define the most generic embeddings model PortType."""


class EmbeddingsPortObject(knext.PortObject):
    def __init__(self, spec: EmbeddingsPortObjectSpec) -> None:
        super().__init__(spec)

    def serialize(self):
        return b""

    @classmethod
    def deserialize(cls, spec, data: dict):
        return cls(spec)

    def create_model(self, ctx: knext.ExecutionContext):
        raise NotImplementedError()


embeddings_model_port_type = knext.port_type(
    "Embedding", EmbeddingsPortObject, EmbeddingsPortObjectSpec
)


class SystemMessageHandling(knext.EnumParameterOptions):
    NONE = (
        "None",
        "No system message will precede the prompts.",
    )
    SINGLE = (
        "Global",
        "A specifiable system message will precede each prompt.",
    )
    COLUMN = (
        "Column",
        "Each prompt includes an individual system message specified in a column.",
    )


def _isinstance_of_port_object(
    ctx: knext.DialogCreationContext, port: int, spec_class: Type[knext.PortObjectSpec]
) -> bool:
    """Returns true if the port object spec is an instance of a specific knext.PortObjectSpec."""
    return isinstance(ctx.get_input_specs()[port], spec_class)


@knext.node(
    "LLM Prompter",
    knext.NodeType.PREDICTOR,
    "icons/ml.png",
    model_category,
    keywords=[
        "GenAI",
        "Gen AI",
        "Generative AI",
        "Large Language Model",
    ],
)
@knext.input_port(
    "LLM or Chat Model", "A large language model or chat model.", llm_port_type
)
@knext.input_table("Prompt Table", "A table containing a string column with prompts.")
@knext.output_table(
    "Result Table", "A table containing prompts and their respective answer."
)
class LLMPrompter:
    """
    Prompts a Large Language Model.

    For each row in the input table, this node sends one prompt to the LLM and receives a corresponding response.
    Rows and the corresponding prompts are treated in isolation, i.e. the LLM cannot remember the contents of the previous rows or how it responded to them.

    **Note**: If you use the
    [Credentials Configuration node](https://hub.knime.com/knime/extensions/org.knime.features.js.quickforms/latest/org.knime.js.base.node.configuration.input.credentials.CredentialsDialogNodeFactory)
    and do not select the "Save password in configuration (weakly encrypted)" option for passing the API key for the LLM connector node,
    the Credentials Configuration node will need to be reconfigured upon reopening the workflow, as the credentials flow variable
    was not saved and will therefore not be available to downstream nodes.
    """

    system_message_handling = knext.EnumParameter(
        "Add system message",
        "Specify whether a customizable system message is included in each prompt. This option is only "
        "available for chat models. Note that some chat models (e.g. OpenAI's o1-mini) do not support system messages.",
        default_value=SystemMessageHandling.NONE.name,
        enum=SystemMessageHandling,
        style=knext.EnumParameter.Style.VALUE_SWITCH,
        since_version="5.4.0",
    ).rule(
        knext.DialogContextCondition(
            lambda ctx: _isinstance_of_port_object(ctx, 0, ChatModelPortObjectSpec)
        ),
        knext.Effect.SHOW,
    )

    system_message = knext.MultilineStringParameter(
        "System message",
        """
        The first message given to the model describing how it should behave.

        Example: You are a helpful assistant that has to answer questions truthfully, and
        if you do not know an answer to a question, you should state that.
        """,
        default_value="",
        since_version="5.4.0",
    ).rule(
        knext.And(
            knext.DialogContextCondition(
                lambda ctx: _isinstance_of_port_object(ctx, 0, ChatModelPortObjectSpec)
            ),
            knext.OneOf(system_message_handling, [SystemMessageHandling.SINGLE.name]),
        ),
        knext.Effect.SHOW,
    )

    system_message_column = knext.ColumnParameter(
        "System message column",
        """
        The column containing the system message for each prompt.
        """,
        port_index=1,
        since_version="5.4.0",
    ).rule(
        knext.And(
            knext.DialogContextCondition(
                lambda ctx: _isinstance_of_port_object(ctx, 0, ChatModelPortObjectSpec)
            ),
            knext.OneOf(system_message_handling, [SystemMessageHandling.COLUMN.name]),
        ),
        knext.Effect.SHOW,
    )

    prompt_column = knext.ColumnParameter(
        "Prompt column",
        "Column containing prompts for the LLM.",
        port_index=1,
        column_filter=util.create_type_filer(knext.string()),
    )

    response_column_name = knext.StringParameter(
        "Response column name",
        "Name for the column holding the LLM's responses.",
        default_value="Response",
    )

    output_format = _get_output_format_value_switch()

    async def aprocess_batch(
        self,
        llm,
        sub_batch: List[str],
        progress_tracker: Callable[[int], None],
    ):
        from langchain_core.language_models import BaseChatModel, BaseLanguageModel

        llm: BaseLanguageModel = llm
        responses = await llm.abatch(sub_batch)
        if isinstance(llm, BaseChatModel):
            # chat models return AIMessage, therefore content field of the response has to be extracted
            responses = [response.content for response in responses]
        if progress_tracker:
            progress_tracker.update_progress(len(sub_batch))
        return responses

    async def aprocess_batches_concurrently(
        self,
        prompts: List[str] | List[List],
        llm,
        n_requests: int,
        progress_tracker: Callable[[int], None],
    ):
        func = partial(self.aprocess_batch, llm, progress_tracker=progress_tracker)

        return await util.abatched_apply(func, prompts, n_requests)

    def configure(
        self,
        ctx: knext.ConfigurationContext,
        llm_spec: LLMPortObjectSpec,
        input_table_spec: knext.Schema,
    ):
        if self.prompt_column:
            util.check_column(
                input_table_spec, self.prompt_column, knext.string(), "prompt"
            )
        else:
            self.prompt_column = util.pick_default_column(
                input_table_spec, knext.string()
            )

        if isinstance(llm_spec, ChatModelPortObjectSpec):
            if (
                self.system_message_handling == SystemMessageHandling.SINGLE.name
                and self.system_message == ""
            ):
                raise knext.InvalidParametersError(
                    "The system message must not be empty."
                )

            if self.system_message_handling == SystemMessageHandling.COLUMN.name:
                if self.system_message_column:
                    util.check_column(
                        input_table_spec,
                        self.system_message_column,
                        knext.string(),
                        "system message",
                    )
                else:
                    spec_without_prompts = knext.Schema.from_columns(
                        [c for c in input_table_spec if c.name != self.prompt_column]
                    )
                    try:
                        self.system_message_column = util.pick_default_column(
                            spec_without_prompts, knext.string()
                        )
                    except Exception:
                        raise knext.InvalidParametersError(
                            "When using system messages from a column, the input table must contain at least "
                            "two string columns. One for the system messages and one for the prompts."
                        )

                if self.prompt_column == self.system_message_column:
                    raise knext.InvalidParametersError(
                        "The prompt and system message column can not be the same."
                    )

        llm_spec.validate_context(ctx)

        if not self.response_column_name:
            raise knext.InvalidParametersError(
                "The response column name must not be empty."
            )

        output_column_name = util.handle_column_name_collision(
            input_table_spec.column_names, self.response_column_name
        )

        return input_table_spec.append(
            knext.Column(ktype=knext.string(), name=output_column_name)
        )

    def execute(
        self,
        ctx: knext.ExecutionContext,
        llm_port: LLMPortObject,
        input_table: knext.Table,
    ):
        num_rows = input_table.num_rows

        output_column_name = util.handle_column_name_collision(
            input_table.schema.column_names, self.response_column_name
        )

        output_table: knext.BatchOutputTable = knext.BatchOutputTable.create()

        n_requests = llm_port.spec.n_requests

        is_chat_model = self._is_chat_model(llm_port, ctx)

        progress_tracker = util.ProgressTracker(total_rows=num_rows, ctx=ctx)
        for batch in input_table.batches():
            responses = []
            util.check_canceled(ctx)
            data_frame = batch.to_pandas()

            if data_frame[self.prompt_column].isnull().values.any():
                raise RuntimeError("The prompt column contains a missing value.")

            prompts = self._include_system_messages(is_chat_model, data_frame)

            _validate_json_output_format(self.output_format, prompts)

            def get_responses(llm, prompts=prompts):
                return asyncio.run(
                    self.aprocess_batches_concurrently(
                        prompts, llm, n_requests, progress_tracker
                    )
                )

            responses = _call_model_with_output_format_fallback(
                ctx,
                llm_port,
                get_responses,
                self.output_format,
            )

            data_frame[output_column_name] = responses
            if len(data_frame) == 0:
                data_frame[output_column_name] = data_frame[output_column_name].astype(
                    "string"
                )
            output_table.append(data_frame)

        return output_table

    def _is_chat_model(self, llm_port, ctx) -> bool:
        from langchain_core.language_models import BaseChatModel

        llm = _initialize_model(llm_port, ctx)
        return isinstance(llm, BaseChatModel)

    def _include_system_messages(
        self, is_chat_model, data_frame
    ) -> List[str] | List[List]:
        import langchain_core.messages as lcm

        if (
            not is_chat_model
            or self.system_message_handling == SystemMessageHandling.NONE.name
        ):
            prompts = data_frame[self.prompt_column].tolist()
        else:
            if self.system_message_handling == SystemMessageHandling.SINGLE.name:
                prompts = data_frame[self.prompt_column].tolist()
                prompts = self._add_global_system_message(prompts)
            elif self.system_message_handling == SystemMessageHandling.COLUMN.name:
                if data_frame[self.system_message_column].isnull().values.any():
                    raise RuntimeError(
                        "The system message column contains a missing value."
                    )
                prompts = data_frame.apply(
                    lambda row: [
                        lcm.SystemMessage(row[self.system_message_column]),
                        lcm.HumanMessage(row[self.prompt_column]),
                    ],
                    axis=1,
                ).tolist()
            else:
                raise NotImplementedError(
                    f"System messages handled via '{SystemMessageHandling[self.system_message_handling].label}' are not implemented yet."
                )

        return prompts

    def _add_global_system_message(self, prompts: List[str]) -> List[List]:
        import langchain_core.messages as lcm

        return [
            [
                lcm.SystemMessage(self.system_message),
                lcm.HumanMessage(x),
            ]
            for x in prompts
        ]


@knext.parameter_group(label="Tool Settings", since_version="5.5.0")
class ToolSettings:
    tool_definition_column = knext.ColumnParameter(
        "Tool Definition Column",
        "The column containing the tool definitions.",
        port_index=2,
        column_filter=util.create_type_filer(knext.logical(dict)),
    )

    def configure(self, tool_table_spec: Optional[knext.Schema]):
        if tool_table_spec is None:
            return
        # auto configure is not implemented because there is a bug
        # on the java side that results in dialogs not showing changes made
        # by configure calls after the dialog was opened the first time
        # since the input here is optional, it's very likely that the user
        # will have opened the dialog before connecting the tool table
        util.check_column(
            tool_table_spec,
            self.tool_definition_column,
            knext.logical(dict),
            "tool definition",
            "tool definition",
        )


@knext.parameter_group(label="Output Settings", since_version="5.5.0")
class ChatModelPrompterOutputSettings:
    output_only_new_messages = knext.BoolParameter(
        "Only output new messages",
        "If enabled, only the messages that were created by this node are output.",
        default_value=False,
    )


@knext.node(
    "Chat Model Prompter",
    knext.NodeType.PREDICTOR,
    "icons/ml.png",
    model_category,
    keywords=[
        "GenAI",
        "Gen AI",
        "Generative AI",
        "Large Language Model",
    ],
)
@knext.input_port("Chat Model", "A chat model.", chat_model_port_type)
@knext.input_table(
    "Existing Conversation",
    "A table containing the conversation history, or an empty table.",
)
@knext.input_table(
    "Tool Definitions",
    "An optional table providing a set of tools the model can decide to call.",
    optional=True,
)
@knext.output_table(
    "Messages",
    "A table containing the updated conversation history or only the new messages depending on the configuration.",
)
class ChatModelPrompter:
    """
    Prompts a Chat Model.

    This node prompts a chat model using the provided user message, with an existing conversation history as context.

    If you want to reduce the amount of consumed tokens, consider reducing
    the conversation table length to a reasonable (e.g. 5 conversation steps) length
    before feeding it into the node.

    **Note**: If you use the
    [Credentials Configuration node](https://hub.knime.com/knime/extensions/org.knime.features.js.quickforms/latest/org.knime.js.base.node.configuration.input.credentials.CredentialsDialogNodeFactory)
    and do not select the "Save password in configuration (weakly encrypted)" option for passing the API key for the chat model connector node,
    the Credentials Configuration node will need to be reconfigured upon reopening the workflow, as the credentials flow variable
    was not saved and will therefore not be available to downstream nodes.
    """

    system_message = knext.MultilineStringParameter(
        "System Message",
        """
        The first message given to the model describing how it should behave.

        Example: You are a helpful assistant that has to answer questions truthfully, and
        if you do not know an answer to a question, you should state that.

        This message is optional and an empty message will not be provided to the model.
        This is useful for models that don't support system messages (e.g. OpenAI's o1-mini).
        """,
        default_value="",
    )

    chat_message = knext.MultilineStringParameter(
        "New message",
        "The new message to be added to the conversation. "
        "This message is optional and an empty message will not be provided to the model.",
        default_value="",
    )

    ignore_chat_message_if_last_message_is_tool = knext.BoolParameter(
        "Ignore after tool message",
        "If enabled, the new message is not added to the conversation if the last message in the conversation table is a tool message.",
        default_value=lambda v: v
        < knext.Version(
            5, 5, 0
        ),  # False for versions < 5.5.0 for backwards compatibility
    )

    conversation_settings = ToolChatConversationSettings()

    tool_settings = ToolSettings().rule(
        knext.DialogContextCondition(_tool_definition_table_present),
        knext.Effect.ENABLE,
    )

    output_settings = ChatModelPrompterOutputSettings()

    output_format = _get_output_format_value_switch()

    def configure(
        self,
        ctx: knext.ConfigurationContext,
        chat_model_spec: ChatModelPortObjectSpec,
        input_table_spec: knext.Schema,
        tool_table_spec: Optional[knext.Schema],
    ) -> Schema:
        has_tools = tool_table_spec is not None
        self.conversation_settings.configure(input_table_spec, has_tools)

        if has_tools:
            self.tool_settings.configure(tool_table_spec)

        _validate_json_output_format(
            self.output_format, [self.system_message + self.chat_message]
        )

        chat_model_spec.validate_context(ctx)
        return self._create_output_schema(has_tools)

    def _create_output_schema(self, has_tool_input: bool) -> Schema:
        columns = [
            knext.Column(knext.string(), self.conversation_settings.role_column),
            knext.Column(knext.string(), self.conversation_settings.content_column),
        ]
        if has_tool_input:
            columns += [
                knext.Column(knext.string(), self._tool_name_column),
                knext.Column(knext.string(), self._tool_call_id_column),
                knext.Column(
                    knext.logical(dict),
                    self._tool_call_arguments_column,
                ),
            ]

        return knext.Schema.from_columns(columns)

    @property
    def _tool_name_column(self):
        return self._replace_none_column(
            self.conversation_settings.tool_name_column, "tool_name"
        )

    @property
    def _tool_call_id_column(self):
        return self._replace_none_column(
            self.conversation_settings.tool_call_id_column, "tool_call_id"
        )

    @property
    def _tool_call_arguments_column(self):
        return self._replace_none_column(
            self.conversation_settings.tool_call_arguments_column, "tool_call_arguments"
        )

    def _replace_none_column(self, column, default_name):
        return default_name if column == knext.ColumnParameter.NONE else column

    def _needed_columns(self, has_tool_input: bool):
        columns = [
            self.conversation_settings.role_column,
            self.conversation_settings.content_column,
        ]
        if has_tool_input:
            columns += [
                self._tool_name_column,
                self._tool_call_id_column,
                self._tool_call_arguments_column,
            ]
        return columns

    def execute(
        self,
        ctx: knext.ExecutionContext,
        chat_model: ChatModelPortObject,
        input_table: knext.Table,
        tool_table: Optional[knext.Table],
    ):
        import pandas as pd

        has_tool_input = tool_table is not None
        data_frame: pd.DataFrame = input_table[
            self._needed_columns(has_tool_input)
        ].to_pandas()
        conversation_messages, human_message = self._construct_conversation(data_frame)
        chat = self.initialize_chat_model(ctx, chat_model, tool_table)
        answer = self._invoke_chat_model(chat, conversation_messages)
        response_df = self.create_response_dataframe(
            has_tool_input, human_message, answer
        )
        if self.output_settings.output_only_new_messages:
            return knext.Table.from_pandas(response_df)
        data_frame = pd.concat([data_frame, response_df], ignore_index=True)
        return knext.Table.from_pandas(data_frame)

    def _construct_conversation(self, data_frame):
        import langchain_core.messages as lcm

        conversation_messages = []
        if self.system_message:
            conversation_messages.append(lcm.SystemMessage(content=self.system_message))
        last_message_is_tool = False
        if len(data_frame) > 0:
            conversation_messages += self.conversation_settings.create_messages(
                data_frame
            )

            last_message_is_tool = (
                self.ignore_chat_message_if_last_message_is_tool
                and (
                    data_frame[self.conversation_settings.role_column].iloc[-1]
                    == "tool"
                )
            )
        human_message = None
        if (
            self.chat_message and not last_message_is_tool
        ):  # if the last message is a tool, the chat message is not added
            human_message = lcm.HumanMessage(content=self.chat_message)
            conversation_messages.append(human_message)

        conversation_messages = self._collapse_subsequent_ai_messages(
            conversation_messages
        )

        return conversation_messages, human_message

    def _invoke_chat_model(self, chat, conversation_messages):
        try:
            return chat.invoke(conversation_messages)
        except Exception as e:
            if getattr(e, "param", None) == "messages[0].role" and "system" in str(e):
                raise ValueError(
                    """The selected model does not support system messages. 
                    Please ensure that the model you are using supports system messages 
                    or remove the system message from the configuration."""
                )
            raise e

    def initialize_chat_model(self, ctx, chat_model, tool_table):
        from langchain_core.language_models import BaseChatModel
        import pandas as pd

        chat: BaseChatModel = _initialize_model(chat_model, ctx, self.output_format)
        if tool_table is not None:
            tool_data_frame: pd.DataFrame = tool_table.to_pandas()
            tools = tool_data_frame[self.tool_settings.tool_definition_column].tolist()
            chat = chat.bind_tools(tools)
        return chat

    def create_response_dataframe(self, has_tool_input, human_message, answer):
        import pandas as pd

        rows = []
        if human_message is not None:
            rows.append(self._create_row(human_message, has_tool_input))
        for tool_call in answer.tool_calls:
            rows.append(self._create_row(answer, has_tool_input, tool_call))
        if len(answer.tool_calls) == 0:
            rows.append(self._create_row(answer, has_tool_input))

        response_df = pd.DataFrame(rows)
        response_df = response_df.astype(self._get_output_pandas_types(has_tool_input))
        return response_df

    def _get_output_pandas_types(self, has_tool_input: bool) -> dict:
        types = {
            self.conversation_settings.role_column: "string",
            self.conversation_settings.content_column: "string",
        }
        if has_tool_input:
            types[self._tool_name_column] = "string"
            types[self._tool_call_id_column] = "string"
            types[self._tool_call_arguments_column] = knext.logical(dict).to_pandas()
        return types

    def _create_row(
        self, message, include_tool_columns: bool, tool_call: Optional[dict] = None
    ) -> dict:
        row = {
            self.conversation_settings.role_column: message.type,
            self.conversation_settings.content_column: message.content,
        }
        if include_tool_columns:
            if tool_call is None:
                tool_call = {}
            row[self._tool_name_column] = tool_call.get("name")
            row[self._tool_call_id_column] = tool_call.get("id")
            row[self._tool_call_arguments_column] = tool_call.get("args")
        return row

    def _collapse_subsequent_ai_messages(self, messages: list) -> list:
        import langchain_core.messages as lcm

        if len(messages) == 0:
            return []

        collapsed_messages = [messages[0]]
        for message in messages[1:]:
            if (
                isinstance(message, lcm.AIMessage)
                and isinstance(collapsed_messages[-1], lcm.AIMessage)
                and message.content == collapsed_messages[-1].content
            ):
                collapsed_messages[-1].tool_calls += message.tool_calls
            else:
                collapsed_messages.append(message)
        return collapsed_messages


def _call_model_with_output_format_fallback(
    ctx,
    model_port,
    response_func,
    output_format,
):
    import openai

    try:
        model = _initialize_model(model_port, ctx, output_format)
        return response_func(model)
    except openai.BadRequestError as e:
        if "Invalid parameter: 'response_format'" in str(e):
            ctx.set_warning(
                f"""The selected model does not support the output format '{output_format}', 
                'Text' mode is used as an output format instead."""
            )
            model = _initialize_model(model_port, ctx, OutputFormatOptions.Text.name)
            return response_func(model)
        raise e


def _initialize_model(llm_port, ctx, output_format=OutputFormatOptions.Text.name):
    # string to enum object mapping is used here since the value switch selection returns a string
    output_format = OutputFormatOptions[output_format]

    if output_format == OutputFormatOptions.Text or (
        output_format not in llm_port.spec.supported_output_formats
    ):
        return llm_port.create_model(ctx)
    return llm_port.create_model(ctx, output_format)


def _string_col_filter(column: knext.Column):
    return column.ktype == knext.string()


def _contains_json_keyword(messages: list) -> bool:
    """
    Checks if 'json' keyword appears in messages.

    Messages can be one of:

        For LLM Prompter (checked in execute):
            - prompts ([list of strings])
            - system_message + prompt ([SystemMessage, HumanMessage])

        For Chat Model Prompter (checked in configure):
            - system_message and/or chat_message (str)

    """
    for message in messages:
        if isinstance(message, str):
            if "json" not in message.lower():
                return False
        elif isinstance(message, list):
            combined_message = " ".join(part.content for part in message)
            if "json" not in combined_message.lower():
                return False
    return True


def _validate_json_output_format(output_format: str, messages) -> None:
    """
    Validates that messages contain the word 'JSON' when JSON output format is selected.
    """
    if output_format != OutputFormatOptions.JSON.name:
        return

    if not _contains_json_keyword(messages):
        raise ValueError(
            """When requesting JSON output, the word 'JSON' must appear in either the system message, chat message, or prompt."""
        )


@knext.node(
    "Text Embedder",
    knext.NodeType.PREDICTOR,
    util.ai_icon,
    model_category,
    keywords=[
        "GenAI",
        "Gen AI",
        "Generative AI",
        "Embeddings",
        "Vector",
        "RAG",
        "Retrieval Augmented Generation",
    ],
)
@knext.input_port(
    "Embedding Model",
    "Used to embed the texts from the input table into numerical vectors.",
    embeddings_model_port_type,
)
@knext.input_table("Input Table", "Input table containing a text column to embed.")
@knext.output_table(
    "Output Table", "The input table with the appended embeddings column."
)
class TextEmbedder:
    """
    Embeds text in a string column using an embedding model.

    This node applies the provided embedding model to create embeddings of the texts contained in a string column of the input table.

    A *text embedding* is a dense vector of floating point values capturing the semantic meaning of the text by mapping it to a high-dimensional space.
    Similarities between embedded entities are then derived by how close they are to each other in said space. These embeddings are often used to find
    semantically similar documents e.g. in vector stores.

    Different embedding models encode text differently, resulting in incomparable embeddings. If this node fails to execute with
    'Execute failed: Error while sending a command.', refer to the description of the node that provided the embedding model.

    **Note**: If you use the
    [Credentials Configuration node](https://hub.knime.com/knime/extensions/org.knime.features.js.quickforms/latest/org.knime.js.base.node.configuration.input.credentials.CredentialsDialogNodeFactory)
    and do not select the "Save password in configuration (weakly encrypted)" option for passing the API key for the embeddings connector node,
    the Credentials Configuration node will need to be reconfigured upon reopening the workflow, as the credentials flow variable
    was not saved and will therefore not be available to downstream nodes.
    """

    text_column = knext.ColumnParameter(
        "Text column",
        "The string column containing the texts to embed.",
        port_index=1,
        column_filter=_string_col_filter,
    )

    embeddings_column_name = knext.StringParameter(
        "Embeddings column name",
        "Name for output column that will hold the embeddings.",
        "Embeddings",
    )

    missing_value_handling = knext.EnumParameter(
        "If there are missing values in the text column",
        """Define whether missing or empty values in the text column should 
        result in missing values in the output table or whether the 
        node execution should fail on such values.""",
        default_value=lambda v: (
            util.MissingValueOutputOptions.Fail.name
            if v < knext.Version(5, 3, 0)
            else util.MissingValueOutputOptions.OutputMissingValues.name
        ),
        enum=util.MissingValueOutputOptions,
        style=knext.EnumParameter.Style.VALUE_SWITCH,
        since_version="5.3.0",
    )

    def configure(
        self,
        ctx: knext.ConfigurationContext,
        embeddings_spec: EmbeddingsPortObjectSpec,
        table_spec: knext.Schema,
    ) -> knext.Schema:
        if self.text_column is None:
            self.text_column = util.pick_default_column(table_spec, knext.string())
        else:
            util.check_column(
                table_spec, self.text_column, knext.string(), "text column"
            )

        embeddings_spec.validate_context(ctx)
        output_column_name = util.handle_column_name_collision(
            table_spec.column_names, self.embeddings_column_name
        )
        return table_spec.append(self._create_output_column(output_column_name))

    def _create_output_column(self, output_column_name) -> knext.Column:
        return knext.Column(knext.list_(inner_type=knext.double()), output_column_name)

    def execute(
        self,
        ctx: knext.ExecutionContext,
        embeddings_obj: EmbeddingsPortObject,
        table: knext.Table,
    ) -> knext.Table:
        # Output rows with missing values if "Output Missing Values" option is selected
        # or fail execution if "Fail" is selected and there are missing values
        missing_value_handling_setting = util.MissingValueOutputOptions[
            self.missing_value_handling
        ]

        embeddings_model = embeddings_obj.create_model(ctx)
        output_table = knext.BatchOutputTable.create()
        num_rows = table.num_rows

        if num_rows == 0:
            output_columns = [
                util.OutputColumn(
                    self.embeddings_column_name,
                    knext.list_(knext.double()),
                    pa.list_(pa.float64()),
                )
            ]
            return util.create_empty_table(
                table,
                output_columns,
            )

        i = 0
        output_column_name = util.handle_column_name_collision(
            table.schema.column_names, self.embeddings_column_name
        )
        output_type = pa.list_(pa.float64())
        if missing_value_handling_setting == util.MissingValueOutputOptions.Fail:
            mapper = util.FailOnMissingMapper(
                self.text_column, embeddings_model.embed_documents, output_type
            )
        else:
            mapper = util.OutputMissingMapper(
                self.text_column,
                embeddings_model.embed_documents,
                output_type,
            )
        for batch in table.batches():
            util.check_canceled(ctx)
            pa_table = batch.to_pyarrow()
            table_from_batch = pa.Table.from_batches([pa_table])
            embeddings_array = mapper.map(table_from_batch)
            table_from_batch = table_from_batch.append_column(
                output_column_name, embeddings_array
            )
            output_table.append(knext.Table.from_pyarrow(table_from_batch))

            i += batch.num_rows
            ctx.set_progress(i / num_rows)

        if mapper.all_missing:
            ctx.set_warning("All rows contain missing or empty values.")

        return output_table
